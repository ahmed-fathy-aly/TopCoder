import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class AvoidRoadsTest {

    protected AvoidRoads solution;

    @Before
    public void setUp() {
        solution = new AvoidRoads();
    }

    @Test(timeout = 2000)
    public void testCase0() {
        int width = 6;
        int height = 6;
        String[] bad = new String[]{"0 0 0 1", "6 6 5 6"};

        long expected = 252L;
        long actual = solution.numWays(width, height, bad);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase1() {
        int width = 1;
        int height = 1;
        String[] bad = new String[]{};

        long expected = 2L;
        long actual = solution.numWays(width, height, bad);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase2() {
        int width = 35;
        int height = 31;
        String[] bad = new String[]{};

        long expected = 6406484391866534976L;
        long actual = solution.numWays(width, height, bad);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase3() {
        int width = 2;
        int height = 2;
        String[] bad = new String[]{"0 0 1 0", "1 2 2 2", "1 1 2 1"};

        long expected = 0L;
        long actual = solution.numWays(width, height, bad);

        Assert.assertEquals(expected, actual);
    }

    /*
     * "20 13 21 13", "13 21 13 20", "0 20 0 21", "5 17 6 17", "6 23 5 23", "23 7 23 8", "11 24 12 24", "1 12 2 12", "6 20 6 19", "17 10 17 11", "8 2 8 3", "6 17 6 16", "17 20 17 21", "12 15 11 15", "21 0 22 0", "17 8 17 9", "21 1 21 0", "13 21 13 22", "22 12 22 13", "19 1 20 1", "13 4 14 4", "13 6 13 5", "6 4 7 4", "10 19 11 19", "11 7 12 7", "10 8 10 9", "4 20 4 19", "21 10 20 10", "3 15 3 16", "1 20 1 21", "7 13 7 14", "24 1 24 0", "7 15 8 15", "13 0 13 1", "21 23 22 23", "7 1 7 2", "21 5 21 4", "18 23 17 23", "2 17 2 18", "4 22 5 22", "11 4 12 4", "8 20 8 21", "1 5 1 4", "1 1 1 0", "4 19 5 19", "18 11 17 11", "23 18 23 17", "12 3 11 3", "1 16 1 17", "21 11 20 11"}}
     */
    @Test(timeout = 2000)
    public void testCase4() {
        int width = 24;
        int height = 24;
        String[] bad = new String[]{"20 13 21 13", "13 21 13 20", "0 20 0 21", "5 17 6 17", "6 23 5 23", "23 7 23 8", "11 24 12 24", "1 12 2 12", "6 20 6 19", "17 10 17 11", "8 2 8 3", "6 17 6 16", "17 20 17 21", "12 15 11 15", "21 0 22 0", "17 8 17 9", "21 1 21 0", "13 21 13 22", "22 12 22 13", "19 1 20 1", "13 4 14 4", "13 6 13 5", "6 4 7 4", "10 19 11 19", "11 7 12 7", "10 8 10 9", "4 20 4 19", "21 10 20 10", "3 15 3 16", "1 20 1 21", "7 13 7 14", "24 1 24 0", "7 15 8 15", "13 0 13 1", "21 23 22 23", "7 1 7 2", "21 5 21 4", "18 23 17 23", "2 17 2 18", "4 22 5 22", "11 4 12 4", "8 20 8 21", "1 5 1 4", "1 1 1 0", "4 19 5 19", "18 11 17 11", "23 18 23 17", "12 3 11 3", "1 16 1 17", "21 11 20 11"};
        long expected = 10130439781137L;
        long actual = solution.numWays(width, height, bad);

        Assert.assertEquals(expected, actual);
    }
    
    /*
     * {24, 34, {"23 16 24 16", "24 12 23 12", "20 20 19 20", "22 15 22 14", "22 15 22 14", "21 17 21 16", "20 21 20 20", "21 21 21 20", "20 20 19 20", "23 12 22 12", "20 19 21 19", "20 19 20 18", "24 19 23 19", "21 18 21 17", "24 17 23 17", "20 15 21 15", "24 19 24 18", "21 18 21 17", "24 13 24 12", "22 17 22 18", "20 14 20 13", "24 12 24 13", "24 12 23 12", "20 20 19 20", "24 13 24 12", "22 14 22 13", "23 20 22 20", "20 15 20 14", "24 13 23 13", "20 18 20 19", "24 20 23 20", "24 19 24 20", "20 15 21 15", "20 13 21 13", "24 21 24 20", "23 14 24 14", "21 14 22 14", "23 16 24 16", "23 17 22 17", "21 14 21 13", "20 20 20 19", "24 18 23 18", "24 15 24 16", "23 18 22 18", "20 16 21 16", "21 19 21 20", "21 17 21 18", "23 20 24 20", "23 18 22 18", "21 12 21 11"}}
     */

    @Test(timeout = 2000)
    public void testCase5() {
        int width = 24;
        int height = 24;
        String[] bad = new String[]{"20 13 21 13", "13 21 13 20", "0 20 0 21", "5 17 6 17", "6 23 5 23", "23 7 23 8", "11 24 12 24", "1 12 2 12", "6 20 6 19", "17 10 17 11", "8 2 8 3", "6 17 6 16", "17 20 17 21", "12 15 11 15", "21 0 22 0", "17 8 17 9", "21 1 21 0", "13 21 13 22", "22 12 22 13", "19 1 20 1", "13 4 14 4", "13 6 13 5", "6 4 7 4", "10 19 11 19", "11 7 12 7", "10 8 10 9", "4 20 4 19", "21 10 20 10", "3 15 3 16", "1 20 1 21", "7 13 7 14", "24 1 24 0", "7 15 8 15", "13 0 13 1", "21 23 22 23", "7 1 7 2", "21 5 21 4", "18 23 17 23", "2 17 2 18", "4 22 5 22", "11 4 12 4", "8 20 8 21", "1 5 1 4", "1 1 1 0", "4 19 5 19", "18 11 17 11", "23 18 23 17", "12 3 11 3", "1 16 1 17", "21 11 20 11"};
        long expected = 12291969376586025L;
        long actual = solution.numWays(24, 34, new String[]{"23 16 24 16", "24 12 23 12", "20 20 19 20", "22 15 22 14", "22 15 22 14", "21 17 21 16", "20 21 20 20", "21 21 21 20", "20 20 19 20", "23 12 22 12", "20 19 21 19", "20 19 20 18", "24 19 23 19", "21 18 21 17", "24 17 23 17", "20 15 21 15", "24 19 24 18", "21 18 21 17", "24 13 24 12", "22 17 22 18", "20 14 20 13", "24 12 24 13", "24 12 23 12", "20 20 19 20", "24 13 24 12", "22 14 22 13", "23 20 22 20", "20 15 20 14", "24 13 23 13", "20 18 20 19", "24 20 23 20", "24 19 24 20", "20 15 21 15", "20 13 21 13", "24 21 24 20", "23 14 24 14", "21 14 22 14", "23 16 24 16", "23 17 22 17", "21 14 21 13", "20 20 20 19", "24 18 23 18", "24 15 24 16", "23 18 22 18", "20 16 21 16", "21 19 21 20", "21 17 21 18", "23 20 24 20", "23 18 22 18", "21 12 21 11"});
        Assert.assertEquals(expected, actual);
    }
}
