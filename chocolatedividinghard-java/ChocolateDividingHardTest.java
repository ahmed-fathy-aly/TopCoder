import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ChocolateDividingHardTest
{

	protected ChocolateDividingHard solution;

	@Before
	public void setUp()
	{
		solution = new ChocolateDividingHard();
	}

	@Test(timeout = 2000)
	public void testCase0()
	{
		String[] chocolate = new String[]
		{ "95998", "21945", "23451", "99798", "74083" };

		int expected = 3;
		int actual = solution.findBest(chocolate);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase1()
	{
		String[] chocolate = new String[]
		{ "12942", "23456", "99798", "98998", "67675" };

		int expected = 5;
		int actual = solution.findBest(chocolate);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase2()
	{
		String[] chocolate = new String[]
		{ "129420", "234560", "997980", "989980", "676760" };

		int expected = 6;
		int actual = solution.findBest(chocolate);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase3()
	{
		String[] chocolate = new String[]
		{ "75356291270936062", "61879202375922897", "36129319478450361", "06320615547656937",
				"45254744307868843", "14920689266495048", "71727226106159490", "91771159776736563",
				"94812939088509638", "56115984810304444", "76317596217857418", "59753883189643338" };

		int expected = 44;
		int actual = solution.findBest(chocolate);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 10000)
	public void testCase4()
	{
		String[] chocolate = new String[]
				{"43199969574141291559565905531157468554601127467814772485138443101067627", "05170760127853804401052164933133962161173870350912027536941456763279388", "68573293425610192516276928811719568110454117247698437040033305573384549", "96270646742313735079224079025514363349143377840479593911823596022579583", "03274808593754864090972127014065484066848313999300319751554160628325121", "97226139355554061513331524996107820655891546964137671745446276980165746", "09281844440177721383365186755427565650014021015355783411206860527304535", "95925299948772004384992385440791205024920919141799488628382373693118722", "91504914808914397122858911190539789300700513143075252273304357448388550", "83214647419164097063659253050668100764428464865791279294700788898866411", "27967526651345314531319419274506293177032199622075328589608081700249943", "35243665530915722934743065466092736215768772544939335732498399584305873", "96013472978427763846751797765694317675194138815191099160867628250247976", "38038301421533233001296018607372395146280443986489620421281910341875604", "86035029817031565396709310176137730432535558806446036069278081776831294", "04002278639911823513623313927877498817700813195656911462776553414426198", "39960126807932771548293649821904013027829513910386326882886978579094776", "75026341315593631492470380340239953607730209862133490621875820915275070", "01329143487505813792991176046778100217567419911392503810425212144375023", "99598821948099105578911354007546417419815615747326117442874720481323306", "09976369722898537284400424879931021677850259105025685949536421743803600", "65776848296355740036444804132150820424474101877100745355060297381344711", "34342023223998468281156179838962398710145636493511649468561359708879003", "56843778806312197722412410110448232521513165596289522784917953988351412", "84030912709158117289018804518658353365735962775713817819272157984330035", "72301258318787899712302147769036266304435205114185317753629524262012455", "10861924798965692809241862108960966251720737416899833932352240456091366", "45110398486048361005419192115799322552322026854185726845058849792049481", "60338171948309789487107029713731784794808941831989919613505070148810220", "21439840869975232302206904006238574670778688431883303993326169128508877", "86662190925974939390902309409388966378660170883714836266309547355194970", "28926876116478153348913587626340344041852409217761665113898722958472558", "89093361909552883782911715641441362991281366546025238409995231587076197", "42300780133519730685100072763957189378493967850840350650858443373330391", "88958578184600420906550485790628444491321782944157802051542716570921353", "64485858448668395832908629844593131828784561602188690652568238571855925", "38264297273199817601208938417763709320069698780662984777640317607832858", "03081009649786684080378356897497997098282153911429479214995854556275293", "72002238642334695845310875849786206441206669249025566865340440160905147", "70584074250018773399790390563942190610245468457796967927175499621702938", "47522021180862253920026555576080035257577875092505539486135863068504453", "45215363310824688238898676632186700436799871461406205165720959841817606", "50565399372355104323133553829906954493641006518170684051543755340811176", "49826907633695421058503121265149024616509180642949911334452176198789331", "34053482192215771595256335148563189429950101870129666401936804122284370", "40050982490267296856890234188002329337777005744522213457867899223276176", "07654221765099560250343775468129806420696196354590544014550694574348428", "05960615713173231057992837421622238201094334677973682078832906149281381", "83422111148990898218471063809917471602039058059970939037647530479562965", "88288879570181469854360375994775593571550561807712340370089758428785052", "30841130274809802691405684655180284597534144326508848336793413452003777", "49102579557230519666900421650646577946823548711877497751829085753647229", "79558866651538068470437185579996041839715080008876039859526545142555628", "12812802782192688045426143610011295677855286544560012846229420749429106", "82449004614933327511720315506767203104695288720492794827300176899431890", "33111547465325810013704918246379682736594258950153445858673220390685454", "99178891356024513547761867711472412493658251804378154252143492933195470", "51580723526280701258197650706503671845419039119436266121193843112518250", "26317433996577709939580805090592345210602269152065924204925986311962124", "34255078649083353522596927548704331030014223570822103915861852285500513", "03558459992931089809342399515645120267358563662744698029080766208447372", "32970799257350842669423639002925132313250285261447310895705919655186633", "75347261836154121372490941828177603549835442055102553547749778639905188", "62504257302030417126814425476384755272122426499301104748298146733452775", "93959062285342734817295629346218515632062596961452391853010831814478884", "05385101824865517615034170058010668188261867320082805434442443620430378", "66551952972046312938664088483399946352541948509912790101169590614341716", "80287478815728951766975210637917136083887551376642539053038749654274852", "50085742169789219818206069719536734500946816757850800407590645229871867", "74033833331367553559124514453222857130486744599866988552007321716441710", "38473383245040760755092377794899958206822346325692311841740341238088861", "09784152186414121744158530348170048666994757160436072847891808825883494"};
		int expected = 1330;
		int actual = solution.findBest(chocolate);

		Assert.assertEquals(expected, actual);
	}
	
}
